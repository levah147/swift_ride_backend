# Generated by Django 5.2.2 on 2025-06-07 13:35

import apps.common.utils
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VehicleType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('base_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('per_km_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('per_minute_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('capacity', models.PositiveSmallIntegerField(default=4)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='vehicle_types/')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('year', models.PositiveSmallIntegerField()),
                ('color', models.CharField(max_length=30)),
                ('license_plate', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='License plate must contain only letters, numbers, hyphens, and spaces', regex='^[A-Z0-9\\-\\s]+$')])),
                ('vin_number', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message='VIN must be 17 characters long and contain only valid characters', regex='^[A-HJ-NPR-Z0-9]{17}$')])),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('cng', 'CNG'), ('lpg', 'LPG')], default='petrol', max_length=10)),
                ('engine_capacity', models.DecimalField(blank=True, decimal_places=1, help_text='Engine capacity in liters', max_digits=4, null=True)),
                ('mileage', models.PositiveIntegerField(blank=True, help_text='Current mileage in kilometers', null=True)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_eco_friendly', models.BooleanField(default=False)),
                ('front_photo', models.ImageField(blank=True, help_text='Front view of the vehicle', null=True, upload_to=apps.common.utils.get_file_path)),
                ('back_photo', models.ImageField(blank=True, help_text='Back view of the vehicle', null=True, upload_to=apps.common.utils.get_file_path)),
                ('side_photo', models.ImageField(blank=True, help_text='Side view of the vehicle', null=True, upload_to=apps.common.utils.get_file_path)),
                ('interior_photo', models.ImageField(blank=True, help_text='Interior view of the vehicle', null=True, upload_to=apps.common.utils.get_file_path)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_vehicles', to=settings.AUTH_USER_MODEL)),
                ('vehicle_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='vehicles.vehicletype')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('insurance_type', models.CharField(choices=[('third_party', 'Third Party'), ('comprehensive', 'Comprehensive'), ('commercial', 'Commercial')], max_length=15)),
                ('policy_number', models.CharField(max_length=100, unique=True)),
                ('insurance_company', models.CharField(max_length=100)),
                ('premium_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('coverage_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('certificate_file', models.FileField(upload_to=apps.common.utils.get_file_path)),
                ('is_active', models.BooleanField(default=True)),
                ('vehicle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='insurance', to='vehicles.vehicle')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Inspection',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inspection_type', models.CharField(choices=[('initial', 'Initial Inspection'), ('periodic', 'Periodic Inspection'), ('maintenance', 'Maintenance Inspection'), ('accident', 'Post-Accident Inspection')], max_length=15)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('passed', 'Passed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=15)),
                ('scheduled_date', models.DateTimeField()),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('inspection_center', models.CharField(blank=True, max_length=100, null=True)),
                ('exterior_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('interior_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('engine_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('brake_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('tire_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('lights_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('overall_score', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('next_inspection_date', models.DateField(blank=True, null=True)),
                ('inspection_photos', models.JSONField(blank=True, default=list)),
                ('inspector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conducted_inspections', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inspections', to='vehicles.vehicle')),
            ],
            options={
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='VehicleMaintenanceRecord',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('maintenance_type', models.CharField(choices=[('routine', 'Routine Maintenance'), ('repair', 'Repair'), ('emergency', 'Emergency Repair'), ('upgrade', 'Upgrade')], max_length=15)),
                ('description', models.TextField()),
                ('service_provider', models.CharField(max_length=100)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mileage_at_service', models.PositiveIntegerField()),
                ('service_date', models.DateField()),
                ('next_service_date', models.DateField(blank=True, null=True)),
                ('next_service_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('receipt_file', models.FileField(blank=True, null=True, upload_to=apps.common.utils.get_file_path)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='vehicles.vehicle')),
            ],
            options={
                'ordering': ['-service_date'],
            },
        ),
        migrations.CreateModel(
            name='VehicleDocument',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('registration', 'Vehicle Registration'), ('insurance', 'Insurance Certificate'), ('roadworthiness', 'Roadworthiness Certificate'), ('permit', 'Commercial Permit'), ('inspection', 'Vehicle Inspection'), ('other', 'Other Document')], max_length=20)),
                ('document_number', models.CharField(max_length=100)),
                ('document_file', models.FileField(upload_to=apps.common.utils.get_file_path)),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField()),
                ('issuing_authority', models.CharField(max_length=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='vehicles.vehicle')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('vehicle', 'document_type')},
            },
        ),
    ]
